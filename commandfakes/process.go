// Code generated by counterfeiter. DO NOT EDIT.
package commandfakes

import (
	"os"
	"sync"

	"github.com/BooleanCat/go-command"
)

type Process struct {
	KillStub        func() error
	killMutex       sync.RWMutex
	killArgsForCall []struct{}
	killReturns     struct {
		result1 error
	}
	killReturnsOnCall map[int]struct {
		result1 error
	}
	ReleaseStub        func() error
	releaseMutex       sync.RWMutex
	releaseArgsForCall []struct{}
	releaseReturns     struct {
		result1 error
	}
	releaseReturnsOnCall map[int]struct {
		result1 error
	}
	SignalStub        func(os.Signal) error
	signalMutex       sync.RWMutex
	signalArgsForCall []struct {
		arg1 os.Signal
	}
	signalReturns struct {
		result1 error
	}
	signalReturnsOnCall map[int]struct {
		result1 error
	}
	WaitStub        func() (*os.ProcessState, error)
	waitMutex       sync.RWMutex
	waitArgsForCall []struct{}
	waitReturns     struct {
		result1 *os.ProcessState
		result2 error
	}
	waitReturnsOnCall map[int]struct {
		result1 *os.ProcessState
		result2 error
	}
	GetPidStub        func() int
	getPidMutex       sync.RWMutex
	getPidArgsForCall []struct{}
	getPidReturns     struct {
		result1 int
	}
	getPidReturnsOnCall map[int]struct {
		result1 int
	}
	SetPidStub        func(int) command.Process
	setPidMutex       sync.RWMutex
	setPidArgsForCall []struct {
		arg1 int
	}
	setPidReturns struct {
		result1 command.Process
	}
	setPidReturnsOnCall map[int]struct {
		result1 command.Process
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Process) Kill() error {
	fake.killMutex.Lock()
	ret, specificReturn := fake.killReturnsOnCall[len(fake.killArgsForCall)]
	fake.killArgsForCall = append(fake.killArgsForCall, struct{}{})
	fake.recordInvocation("Kill", []interface{}{})
	fake.killMutex.Unlock()
	if fake.KillStub != nil {
		return fake.KillStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.killReturns.result1
}

func (fake *Process) KillCallCount() int {
	fake.killMutex.RLock()
	defer fake.killMutex.RUnlock()
	return len(fake.killArgsForCall)
}

func (fake *Process) KillReturns(result1 error) {
	fake.KillStub = nil
	fake.killReturns = struct {
		result1 error
	}{result1}
}

func (fake *Process) KillReturnsOnCall(i int, result1 error) {
	fake.KillStub = nil
	if fake.killReturnsOnCall == nil {
		fake.killReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.killReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Process) Release() error {
	fake.releaseMutex.Lock()
	ret, specificReturn := fake.releaseReturnsOnCall[len(fake.releaseArgsForCall)]
	fake.releaseArgsForCall = append(fake.releaseArgsForCall, struct{}{})
	fake.recordInvocation("Release", []interface{}{})
	fake.releaseMutex.Unlock()
	if fake.ReleaseStub != nil {
		return fake.ReleaseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.releaseReturns.result1
}

func (fake *Process) ReleaseCallCount() int {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return len(fake.releaseArgsForCall)
}

func (fake *Process) ReleaseReturns(result1 error) {
	fake.ReleaseStub = nil
	fake.releaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *Process) ReleaseReturnsOnCall(i int, result1 error) {
	fake.ReleaseStub = nil
	if fake.releaseReturnsOnCall == nil {
		fake.releaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.releaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Process) Signal(arg1 os.Signal) error {
	fake.signalMutex.Lock()
	ret, specificReturn := fake.signalReturnsOnCall[len(fake.signalArgsForCall)]
	fake.signalArgsForCall = append(fake.signalArgsForCall, struct {
		arg1 os.Signal
	}{arg1})
	fake.recordInvocation("Signal", []interface{}{arg1})
	fake.signalMutex.Unlock()
	if fake.SignalStub != nil {
		return fake.SignalStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.signalReturns.result1
}

func (fake *Process) SignalCallCount() int {
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	return len(fake.signalArgsForCall)
}

func (fake *Process) SignalArgsForCall(i int) os.Signal {
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	return fake.signalArgsForCall[i].arg1
}

func (fake *Process) SignalReturns(result1 error) {
	fake.SignalStub = nil
	fake.signalReturns = struct {
		result1 error
	}{result1}
}

func (fake *Process) SignalReturnsOnCall(i int, result1 error) {
	fake.SignalStub = nil
	if fake.signalReturnsOnCall == nil {
		fake.signalReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.signalReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Process) Wait() (*os.ProcessState, error) {
	fake.waitMutex.Lock()
	ret, specificReturn := fake.waitReturnsOnCall[len(fake.waitArgsForCall)]
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct{}{})
	fake.recordInvocation("Wait", []interface{}{})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		return fake.WaitStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.waitReturns.result1, fake.waitReturns.result2
}

func (fake *Process) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *Process) WaitReturns(result1 *os.ProcessState, result2 error) {
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 *os.ProcessState
		result2 error
	}{result1, result2}
}

func (fake *Process) WaitReturnsOnCall(i int, result1 *os.ProcessState, result2 error) {
	fake.WaitStub = nil
	if fake.waitReturnsOnCall == nil {
		fake.waitReturnsOnCall = make(map[int]struct {
			result1 *os.ProcessState
			result2 error
		})
	}
	fake.waitReturnsOnCall[i] = struct {
		result1 *os.ProcessState
		result2 error
	}{result1, result2}
}

func (fake *Process) GetPid() int {
	fake.getPidMutex.Lock()
	ret, specificReturn := fake.getPidReturnsOnCall[len(fake.getPidArgsForCall)]
	fake.getPidArgsForCall = append(fake.getPidArgsForCall, struct{}{})
	fake.recordInvocation("GetPid", []interface{}{})
	fake.getPidMutex.Unlock()
	if fake.GetPidStub != nil {
		return fake.GetPidStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getPidReturns.result1
}

func (fake *Process) GetPidCallCount() int {
	fake.getPidMutex.RLock()
	defer fake.getPidMutex.RUnlock()
	return len(fake.getPidArgsForCall)
}

func (fake *Process) GetPidReturns(result1 int) {
	fake.GetPidStub = nil
	fake.getPidReturns = struct {
		result1 int
	}{result1}
}

func (fake *Process) GetPidReturnsOnCall(i int, result1 int) {
	fake.GetPidStub = nil
	if fake.getPidReturnsOnCall == nil {
		fake.getPidReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getPidReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *Process) SetPid(arg1 int) command.Process {
	fake.setPidMutex.Lock()
	ret, specificReturn := fake.setPidReturnsOnCall[len(fake.setPidArgsForCall)]
	fake.setPidArgsForCall = append(fake.setPidArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("SetPid", []interface{}{arg1})
	fake.setPidMutex.Unlock()
	if fake.SetPidStub != nil {
		return fake.SetPidStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.setPidReturns.result1
}

func (fake *Process) SetPidCallCount() int {
	fake.setPidMutex.RLock()
	defer fake.setPidMutex.RUnlock()
	return len(fake.setPidArgsForCall)
}

func (fake *Process) SetPidArgsForCall(i int) int {
	fake.setPidMutex.RLock()
	defer fake.setPidMutex.RUnlock()
	return fake.setPidArgsForCall[i].arg1
}

func (fake *Process) SetPidReturns(result1 command.Process) {
	fake.SetPidStub = nil
	fake.setPidReturns = struct {
		result1 command.Process
	}{result1}
}

func (fake *Process) SetPidReturnsOnCall(i int, result1 command.Process) {
	fake.SetPidStub = nil
	if fake.setPidReturnsOnCall == nil {
		fake.setPidReturnsOnCall = make(map[int]struct {
			result1 command.Process
		})
	}
	fake.setPidReturnsOnCall[i] = struct {
		result1 command.Process
	}{result1}
}

func (fake *Process) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.killMutex.RLock()
	defer fake.killMutex.RUnlock()
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	fake.getPidMutex.RLock()
	defer fake.getPidMutex.RUnlock()
	fake.setPidMutex.RLock()
	defer fake.setPidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Process) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ command.Process = new(Process)
